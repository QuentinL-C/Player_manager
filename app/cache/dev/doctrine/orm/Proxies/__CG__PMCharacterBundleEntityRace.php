<?php

namespace Proxies\__CG__\PM\CharacterBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Race extends \PM\CharacterBundle\Entity\Race implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'id', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'name', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'description', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'slug', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'size', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'speed', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'skillModifier', 'predilectionClass', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'languages', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'hpModifier', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'abilities', 'createUser', 'createDate', 'updateUser', 'updateDate', 'updateComment');
        }

        return array('__isInitialized__', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'id', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'name', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'description', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'slug', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'size', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'speed', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'skillModifier', 'predilectionClass', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'languages', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'hpModifier', '' . "\0" . 'PM\\CharacterBundle\\Entity\\Race' . "\0" . 'abilities', 'createUser', 'createDate', 'updateUser', 'updateDate', 'updateComment');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Race $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', array($slug));

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', array());

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setSize(\PM\CharacterBundle\Entity\Size $size = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSize', array($size));

        return parent::setSize($size);
    }

    /**
     * {@inheritDoc}
     */
    public function getSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSize', array());

        return parent::getSize();
    }

    /**
     * {@inheritDoc}
     */
    public function setSkillModifier($skillModifier)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSkillModifier', array($skillModifier));

        return parent::setSkillModifier($skillModifier);
    }

    /**
     * {@inheritDoc}
     */
    public function getSkillModifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSkillModifier', array());

        return parent::getSkillModifier();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreateDate($createDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreateDate', array($createDate));

        return parent::setCreateDate($createDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreateDate', array());

        return parent::getCreateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdateDate($updateDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdateDate', array($updateDate));

        return parent::setUpdateDate($updateDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateDate', array());

        return parent::getUpdateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdateComment($updateComment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdateComment', array($updateComment));

        return parent::setUpdateComment($updateComment);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateComment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateComment', array());

        return parent::getUpdateComment();
    }

    /**
     * {@inheritDoc}
     */
    public function setPredilectionClass(\PM\CharacterBundle\Entity\ClassDnD $predilectionClass = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPredilectionClass', array($predilectionClass));

        return parent::setPredilectionClass($predilectionClass);
    }

    /**
     * {@inheritDoc}
     */
    public function getPredilectionClass()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPredilectionClass', array());

        return parent::getPredilectionClass();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreateUser(\PM\UserBundle\Entity\User $createUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreateUser', array($createUser));

        return parent::setCreateUser($createUser);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreateUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreateUser', array());

        return parent::getCreateUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdateUser(\PM\UserBundle\Entity\User $updateUser = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdateUser', array($updateUser));

        return parent::setUpdateUser($updateUser);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateUser', array());

        return parent::getUpdateUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpeed($speed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpeed', array($speed));

        return parent::setSpeed($speed);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpeed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpeed', array());

        return parent::getSpeed();
    }

    /**
     * {@inheritDoc}
     */
    public function addLanguage(\PM\CharacterBundle\Entity\Skill $language)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLanguage', array($language));

        return parent::addLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLanguage(\PM\CharacterBundle\Entity\Language $language)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLanguage', array($language));

        return parent::removeLanguage($language);
    }

    /**
     * {@inheritDoc}
     */
    public function getLanguages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLanguages', array());

        return parent::getLanguages();
    }

    /**
     * {@inheritDoc}
     */
    public function setHpModifier($hpModifier)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHpModifier', array($hpModifier));

        return parent::setHpModifier($hpModifier);
    }

    /**
     * {@inheritDoc}
     */
    public function getHpModifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHpModifier', array());

        return parent::getHpModifier();
    }

    /**
     * {@inheritDoc}
     */
    public function addAbility(\PM\CharacterBundle\Entity\RaceAbility $ability)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAbility', array($ability));

        return parent::addAbility($ability);
    }

    /**
     * {@inheritDoc}
     */
    public function getAbilities()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbilities', array());

        return parent::getAbilities();
    }

    /**
     * {@inheritDoc}
     */
    public function removeClassDnDInstance(\PM\CharacterBundle\Entity\RaceAbility $ability)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeClassDnDInstance', array($ability));

        return parent::removeClassDnDInstance($ability);
    }

}
